The Zerograph Protocol
======================

The Zerograph protocol is a line-based text protocol that allows batches of
requests and responses to be exchanged alternately between client and server.
It borrows a number of concepts from HTTP and REST including methods and
response status codes.

The protocol expects all communication between client and server to be
carried out over ZeroMQ sockets and the SNDMORE/RCVMORE flags may be used to
transmit both requests and responses over multiple frames.


Requests and Responses
----------------------

Each client request consists of a batch of one or more requests on separate
lines. Each line consists of multiple terms separated by TAB characters
which, within this document, will be generally represented by simple
whitespace. Where potentially ambiguous, the symbol [->] will be used
instead.

The symbols >>> and <<< will also be used at the start of lines to indicate
client-to-server requests and server-to-client responses respectively. These
are not part of the messages themselves.

The following is an example of a request batch and the responses returned:

>>> POST node ["Person"] {"name":"Alice"}
>>> POST node ["Person"] {"name":"Bob"}
>>> POST rel /*Pointer*/0 /*Pointer*/1 KNOWS {"since":1999}

<<< 200 /*Node*/{"id":123,"labels":["Person"],"properties":{"name":"Alice"}}
<<< 200 /*Node*/{"id":124,"labels":["Person"],"properties":{"name":"Bob"}}
<<< 200 /*Rel*/{"id":234,"start":{"id":123,"labels":["Person"],"properties":
        {"name":"Alice"}},"end":{"id":124,"labels":["Person"],"properties":
        {"name":"Bob"}},"type":"KNOWS","properties":{"since":1999}}
<<< 200

Each request line has one or more corresponding response lines and a final
response line is appended to describe the success or failure of the overall
batch. This is necessary as the whole batch is executed within a single
transaction and some problems may not arise until the entire transaction is
committed.

Responses consisting of multiple lines will use a 100 status code for all
lines except the last as in the example below:

>>> POST cypher "START n=node(*) RETURN n LIMIT 3"

<<< 100 "n"
<<< 100 /*Node*/{"id":0,"labels":["Person"],"properties":{"name":"Alice"}}
<<< 100 /*Node*/{"id":1,"labels":["Person"],"properties":{"name":"Bob"}}
<<< 100 /*Node*/{"id":2,"labels":["Person"],"properties":{"name":"Carol"}}
<<< 200
<<< 200

Here, the response consists of one header line, three data lines, one footer
line and an overall batch summary line.
